/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**  
** Permission is hereby granted, free of charge, to any person or organization 
** obtaining a copy of the software and accompanying documentation (the 
** "Software") to use, reproduce, display, distribute, sub-license, execute, 
** and transmit the Software, and to prepare derivative works of the Software, 
** and to permit third-parties to whom the Software is furnished to do so, in 
** accordance with:
** 
** (1) if the Software is obtained from Blackmagic Design, the End User License 
** Agreement for the Software Development Kit (“EULA”) available at 
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
** 
** (2) if the Software is obtained from any third party, such licensing terms 
** as notified by that third party,
** 
** and all subject to the following:
** 
** (3) the copyright notices in the Software and this entire statement, 
** including the above license grant, this restriction and the following 
** disclaimer, must be included in all copies of the Software, in whole or in 
** part, and all derivative works of the Software, unless such copies or 
** derivative works are solely in the form of machine-executable object code 
** generated by a source language processor.
** 
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
** DEALINGS IN THE SOFTWARE.
** 
** A copy of the Software is available free of charge at 
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
** 
** -LICENSE-END-
*/

#pragma once

#include <map>
#include <QDialog>
#include <QEvent>
#include <QLayout>

#include "com_ptr.h"
#include "DeckLinkDeviceDiscovery.h"
#include "DeckLinkOpenGLWidget.h"
#include "HDRVideoFrame.h"

// Define custom event type
const QEvent::Type kAddDeviceEvent			= static_cast<QEvent::Type>(QEvent::User + 1);
const QEvent::Type kRemoveDeviceEvent		= static_cast<QEvent::Type>(QEvent::User + 2);

enum class EOTF { SDR = 0, HDR = 1, PQ = 2, HLG = 3 };

// Forward declarations
class DeckLinkDeviceDiscovery;

namespace Ui {
class SignalGenHDR;
}

class SignalGenHDR : public QDialog
{
	Q_OBJECT

	using DisplayModeMap = std::map<BMDDisplayMode, com_ptr<IDeckLinkDisplayMode>>;

public:
	explicit SignalGenHDR(QWidget *parent = 0);
	~SignalGenHDR();

	void customEvent(QEvent* event);
	void closeEvent(QCloseEvent *event);

	void setup();

	void EnableInterface(bool enable);
	void EnableHDRInterface(bool enable);

	void StartRunning(void);
	void StopRunning(void);

	void RefreshDisplayModeMenu(void);
	void RefreshPixelFormatMenu(void);
	void RefreshEOTFMenu(void);
	void AddDevice(com_ptr<IDeckLink> deckLink);
	void RemoveDevice(com_ptr<IDeckLink> deckLink);
	void UpdateOutputFrame(void);


private:
	Ui::SignalGenHDR*					ui;
	QGridLayout*						layout;
	DeckLinkOpenGLWidget*				m_previewView;

	bool								m_running;

	com_ptr<DeckLinkDeviceDiscovery>	m_deckLinkDiscovery;
	com_ptr<IDeckLinkDisplayMode>		m_selectedDisplayMode;
	com_ptr<IDeckLinkOutput>			m_selectedDeckLinkOutput;
	com_ptr<IDeckLinkConfiguration>		m_selectedDeckLinkConfiguration;
	com_ptr<HDRVideoFrame>				m_videoFrameBars;
	BMDPixelFormat						m_selectedPixelFormat;
	HDRMetadata							m_selectedHDRParameters;

	DisplayModeMap						m_supportedDisplayModeMap;

	com_ptr<HDRVideoFrame>		CreateColorbarsFrame(void);

public slots:
	void OutputDeviceChanged(int selectedDeviceIndex);
	void VideoFormatChanged(int selectedVideoFormatIndex);
	void PixelFormatChanged(int selectedPixelFormatIndex);
	void EOTFChanged(int selectedEOTFIndex);
	void ToggleStart();

	void DisplayPrimaryRedXSliderChanged(int displayPrimaryRedXValue);
	void DisplayPrimaryRedYSliderChanged(int displayPrimaryRedYValue);
	void DisplayPrimaryGreenXSliderChanged(int displayPrimaryGreenXValue);
	void DisplayPrimaryGreenYSliderChanged(int displayPrimaryGreenYValue);
	void DisplayPrimaryBlueXSliderChanged(int displayPrimaryBlueXValue);
	void DisplayPrimaryBlueYSliderChanged(int displayPrimaryBlueYValue);
	void WhitePointXSliderChanged(int whitePointXValue);
	void WhitePointYSliderChanged(int whitePointYValue);
	void MaxDisplayMasteringLuminanceSliderChanged(int maxDisplayMasteringLuminanceValue);
	void MinDisplayMasteringLuminanceSliderChanged(int minDisplayMasteringLuminanceValue);
	void MaxCLLSliderChanged(int maxCLLValue);
	void MaxFALLSliderChanged(int maxFALLValue);
};

