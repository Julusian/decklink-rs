/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**  
** Permission is hereby granted, free of charge, to any person or organization 
** obtaining a copy of the software and accompanying documentation (the 
** "Software") to use, reproduce, display, distribute, sub-license, execute, 
** and transmit the Software, and to prepare derivative works of the Software, 
** and to permit third-parties to whom the Software is furnished to do so, in 
** accordance with:
** 
** (1) if the Software is obtained from Blackmagic Design, the End User License 
** Agreement for the Software Development Kit (“EULA”) available at 
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
** 
** (2) if the Software is obtained from any third party, such licensing terms 
** as notified by that third party,
** 
** and all subject to the following:
** 
** (3) the copyright notices in the Software and this entire statement, 
** including the above license grant, this restriction and the following 
** disclaimer, must be included in all copies of the Software, in whole or in 
** part, and all derivative works of the Software, unless such copies or 
** derivative works are solely in the form of machine-executable object code 
** generated by a source language processor.
** 
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
** DEALINGS IN THE SOFTWARE.
** 
** A copy of the Software is available free of charge at 
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
** 
** -LICENSE-END-
*/

#include "DeckLinkDeviceListModel.h"

/// DeckLinkDeviceDiscovery class

DeckLinkDeviceDiscovery::DeckLinkDeviceDiscovery() :
	m_refCount(1)
{
}

// IUnknown methods

HRESULT DeckLinkDeviceDiscovery::QueryInterface(REFIID iid, LPVOID *ppv)
{
	HRESULT result = S_OK;

	if (ppv == nullptr)
		return E_POINTER;

	// Obtain the IUnknown interface and compare it the provided REFIID
	if (iid == IID_IUnknown)
	{
		*ppv = this;
		AddRef();
	}
	else if (iid == IID_IDeckLinkDeviceNotificationCallback)
	{
		*ppv = static_cast<IDeckLinkDeviceNotificationCallback*>(this);
		AddRef();
	}
	else
	{
		*ppv = nullptr;
		result = E_NOINTERFACE;
	}

	return result;
}

ULONG DeckLinkDeviceDiscovery::AddRef(void)
{
	return ++m_refCount;
}

ULONG DeckLinkDeviceDiscovery::Release(void)
{
	ULONG newRefValue = --m_refCount;
	if (newRefValue == 0)
		delete this;

	return newRefValue;
}

// IDeckLinkDeviceArrivalNotificationCallback methods

HRESULT DeckLinkDeviceDiscovery::DeckLinkDeviceArrived(IDeckLink* deckLink)
{
	// Notify listener that new device has been added.
	emit deviceArrived(com_ptr<IDeckLink>(deckLink));
	return S_OK;
}

HRESULT DeckLinkDeviceDiscovery::DeckLinkDeviceRemoved(IDeckLink* deckLink)
{
	// Notify listener that device has been removed.
	emit deviceRemoved(com_ptr<IDeckLink>(deckLink));
	return S_OK;
}

/// DeckLinkDeviceListModel class

DeckLinkDeviceListModel::DeckLinkDeviceListModel(QObject* parent) :
	QAbstractListModel(parent)
	//,m_selectedIndex(-1)
{
	m_delegate = make_com_ptr<DeckLinkDeviceDiscovery>();

	connect(m_delegate.get(), &DeckLinkDeviceDiscovery::deviceArrived, this, &DeckLinkDeviceListModel::addDevice, Qt::QueuedConnection);
	connect(m_delegate.get(), &DeckLinkDeviceDiscovery::deviceRemoved, this, &DeckLinkDeviceListModel::removeDevice, Qt::QueuedConnection);
}

IDeckLinkDeviceNotificationCallback* DeckLinkDeviceListModel::delegate()
{
	return m_delegate.get();
}

int DeckLinkDeviceListModel::rowCount(const QModelIndex& parent) const
{
	Q_UNUSED(parent)
	return (int)m_deviceList.size();
}

QVariant DeckLinkDeviceListModel::data(const QModelIndex& index, int role) const
{
	if (!index.isValid() || (index.row() >= m_deviceList.size()))
		return QVariant();

	try
	{
		const DeviceItem &item = m_deviceList.at(index.row());

		if (role == (int)Qt::DisplayRole)
			return item.m_displayName;
		else if (role == DeckLinkDeviceRole)
			return QVariant::fromValue((void*)item.m_deckLink.get());
		else
			return QVariant();
	}
	catch (std::out_of_range)
	{
		return QVariant();
	}
}

QVariant DeckLinkDeviceListModel::headerData(int section, Qt::Orientation orientation, int role) const
{
	Q_UNUSED(section)
	Q_UNUSED(orientation)
	Q_UNUSED(role)
	return QVariant();
}

void DeckLinkDeviceListModel::addDevice(com_ptr<IDeckLink> device)
{
	int			index = m_deviceList.size();
	dlstring_t	deviceNameStr;

	if (device->GetDisplayName(&deviceNameStr) != S_OK)
		return;

	beginInsertRows(QModelIndex(), index, index);
	m_deviceList.push_back({ DlToQString(deviceNameStr), std::move(device) });
	endInsertRows();
}

void DeckLinkDeviceListModel::removeDevice(com_ptr<IDeckLink> device)
{
	for (int i = 0; i < m_deviceList.size(); ++i)
	{
		if (m_deviceList[i].m_deckLink == device)
		{
			beginRemoveRows(QModelIndex(), i, i);
			m_deviceList.erase(m_deviceList.begin() + i);
			endRemoveRows();
			break;
		}
	}
}
